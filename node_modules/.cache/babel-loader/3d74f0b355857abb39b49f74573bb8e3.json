{"ast":null,"code":"import * as actionTypes from './actionTypes';\nexport const authStart = () => {\n  return {\n    type: actionTypes.AUTH_START\n  };\n};\nexport const authSuccess = (token, userName) => {\n  return {\n    type: actionTypes.AUTH_SUCCESS,\n    idToken: token,\n    userName: userName\n  };\n};\nexport const authFail = error => {\n  return {\n    type: actionTypes.AUTH_FAIL,\n    error: error\n  };\n};\nexport const checkAuthTimeout = expirationTime => {\n  return dispatch => {\n    setTimeout(() => {\n      dispatch(logout());\n    }, expirationTime * 1000);\n  };\n};\nexport const logoutt = () => {\n  localStorage.removeItem('token');\n  localStorage.removeItem('expirationDate');\n  localStorage.removeItem('userName');\n  return {\n    type: actionTypes.AUTH_LOGOUT\n  };\n};\nexport const auth = (token, userName) => {\n  return dispatch => {\n    dispatch(authStart());\n    const expirationDate = new Date(new Date().getTime() + 72 * 1000);\n    localStorage.setItem('token', token);\n    localStorage.setItem('expirationDate', expirationDate);\n    localStorage.setItem('userName', userName);\n    dispatch(authSuccess(token, user.name));\n  };\n};\nexport const setAuthRedirectPath = path => {\n  return {\n    type: actionTypes.SET_AUTH_REDIRECT_PATH,\n    path: path\n  };\n};\nexport const authCheckState = () => {\n  return dispatch => {\n    const token = localStorage.getItem('token');\n\n    if (!token) {\n      dispatch(logout());\n    } else {\n      const expirationDate = new Date(localStorage.getItem('expirationDate'));\n\n      if (expirationDate < new Date()) {\n        dispatch(logout());\n      } else {\n        const userName = localStorage.getItem('userName');\n        dispatch(authSuccess(token, userName));\n        dispatch(checkAuthTimeout((expirationDate.getTime() - new Date().getTime()) / 1000));\n      }\n    }\n  };\n};","map":{"version":3,"sources":["/Users/rhyswaters/repos/KovidR.UI/src/store/actions/auth.js"],"names":["actionTypes","authStart","type","AUTH_START","authSuccess","token","userName","AUTH_SUCCESS","idToken","authFail","error","AUTH_FAIL","checkAuthTimeout","expirationTime","dispatch","setTimeout","logout","logoutt","localStorage","removeItem","AUTH_LOGOUT","auth","expirationDate","Date","getTime","setItem","user","name","setAuthRedirectPath","path","SET_AUTH_REDIRECT_PATH","authCheckState","getItem"],"mappings":"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","sourcesContent":["import * as actionTypes from './actionTypes';\n\nexport const authStart = () => {\n    return {\n        type: actionTypes.AUTH_START\n    };\n};\n\nexport const authSuccess = (token, userName) => {\n    return {\n        type: actionTypes.AUTH_SUCCESS,\n        idToken: token,\n        userName: userName\n    };\n};\n\nexport const authFail = (error) => {\n    return {\n        type: actionTypes.AUTH_FAIL,\n        error: error\n    };\n};\n\nexport const checkAuthTimeout = (expirationTime) => {\n    return dispatch => {\n        setTimeout(() => {\n            dispatch(logout());\n        }, expirationTime * 1000);\n    };\n}\n\nexport const logoutt = () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('expirationDate');\n    localStorage.removeItem('userName');\n\n    return {\n        type: actionTypes.AUTH_LOGOUT\n    }\n}\n\nexport const auth = (token, userName) => {\n    return dispatch => {\n\n        dispatch(authStart());\n        const expirationDate = new Date(new Date().getTime() + 72 * 1000);\n        localStorage.setItem('token', token);\n        localStorage.setItem('expirationDate', expirationDate);\n        localStorage.setItem('userName', userName);\n        dispatch(authSuccess(token, user.name));\n    }\n};\n\n\nexport const setAuthRedirectPath = (path) => {\n    return {\n        type: actionTypes.SET_AUTH_REDIRECT_PATH,\n        path: path\n    };\n};\n\nexport const authCheckState = () => {\n    return dispatch => {\n        const token = localStorage.getItem('token');\n        if(!token) {\n            dispatch(logout());\n        } else {\n            const expirationDate = new Date(localStorage.getItem('expirationDate'));\n            if (expirationDate < new Date()) {\n                dispatch(logout());\n            } else {\n                const userName = localStorage.getItem('userName');\n                dispatch(authSuccess(token, userName));\n                dispatch(checkAuthTimeout((expirationDate.getTime() - new Date().getTime()) / 1000 ));\n            }\n        }\n    };\n};"]},"metadata":{},"sourceType":"module"}