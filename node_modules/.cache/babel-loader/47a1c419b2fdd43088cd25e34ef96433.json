{"ast":null,"code":"import * as actionTypes from './actionTypes';\nimport { useAuth0 } from \"@auth0/auth0-react\";\nconst {\n  loginWithRedirect,\n  logout,\n  user,\n  getAccessTokenSilently\n} = useAuth0();\nexport const authStart = () => {\n  return {\n    type: actionTypes.AUTH_START\n  };\n};\nexport const authSuccess = (token, userId) => {\n  return {\n    type: actionTypes.AUTH_SUCCESS,\n    idToken: token,\n    userId: userId\n  };\n};\nexport const authFail = error => {\n  return {\n    type: actionTypes.AUTH_FAIL,\n    error: error\n  };\n};\nexport const checkAuthTimeout = expirationTime => {\n  return dispatch => {\n    setTimeout(() => {\n      dispatch(logout());\n    }, expirationTime * 1000);\n  };\n};\nexport const logoutt = () => {\n  logout({\n    returnTo: window.location.origin\n  });\n  localStorage.removeItem('token');\n  localStorage.removeItem('expirationDate');\n  localStorage.removeItem('userId');\n  return {\n    type: actionTypes.AUTH_LOGOUT\n  };\n};\nexport const auth = () => {\n  return dispatch => {\n    dispatch(authStart());\n    let token = null;\n    loginWithRedirect().then(() => {\n      try {\n        getAccessTokenSilently({\n          audience: 'https://api.kovidr.ie/guess',\n          scope: \"read:guesses read:caseNumbers write:guesses\"\n        }).then(response => {\n          const expirationDate = new Date(new Date().getTime() + 72 * 1000);\n          localStorage.setItem('token', response.token);\n          localStorage.setItem('expirationDate', expirationDate);\n          localStorage.setItem('userId', user.name);\n          dispatch(authSuccess(token, user.name));\n        });\n      } catch (e) {\n        dispatch(authFail(e.message));\n      }\n    });\n  };\n};\nexport const setAuthRedirectPath = path => {\n  return {\n    type: actionTypes.SET_AUTH_REDIRECT_PATH,\n    path: path\n  };\n};\nexport const authCheckState = () => {\n  return dispatch => {\n    const token = localStorage.getItem('token');\n\n    if (!token) {\n      dispatch(logout());\n    } else {\n      const expirationDate = new Date(localStorage.getItem('expirationDate'));\n\n      if (expirationDate < new Date()) {\n        dispatch(logout());\n      } else {\n        const userId = localStorage.getItem('userId');\n        dispatch(authSuccess(token, userId));\n        dispatch(checkAuthTimeout((expirationDate.getTime() - new Date().getTime()) / 1000));\n      }\n    }\n  };\n};","map":{"version":3,"sources":["/Users/rhyswaters/repos/KovidR.UI/src/store/actions/auth.js"],"names":["actionTypes","useAuth0","loginWithRedirect","logout","user","getAccessTokenSilently","authStart","type","AUTH_START","authSuccess","token","userId","AUTH_SUCCESS","idToken","authFail","error","AUTH_FAIL","checkAuthTimeout","expirationTime","dispatch","setTimeout","logoutt","returnTo","window","location","origin","localStorage","removeItem","AUTH_LOGOUT","auth","then","audience","scope","response","expirationDate","Date","getTime","setItem","name","e","message","setAuthRedirectPath","path","SET_AUTH_REDIRECT_PATH","authCheckState","getItem"],"mappings":"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","sourcesContent":["import * as actionTypes from './actionTypes';\nimport { useAuth0 } from \"@auth0/auth0-react\";\n\nconst { loginWithRedirect, logout,  user, getAccessTokenSilently} = useAuth0();\n\nexport const authStart = () => {\n    return {\n        type: actionTypes.AUTH_START\n    };\n};\n\nexport const authSuccess = (token, userId) => {\n    return {\n        type: actionTypes.AUTH_SUCCESS,\n        idToken: token,\n        userId: userId\n    };\n};\n\nexport const authFail = (error) => {\n    return {\n        type: actionTypes.AUTH_FAIL,\n        error: error\n    };\n};\n\nexport const checkAuthTimeout = (expirationTime) => {\n    return dispatch => {\n        setTimeout(() => {\n            dispatch(logout());\n        }, expirationTime * 1000);\n    };\n}\n\nexport const logoutt = () => {\n    logout({ returnTo: window.location.origin });\n    localStorage.removeItem('token');\n    localStorage.removeItem('expirationDate');\n    localStorage.removeItem('userId');\n\n    return {\n        type: actionTypes.AUTH_LOGOUT\n    }\n}\n\nexport const auth = () => {\n    return dispatch => {\n        dispatch(authStart());\n        \n        let token = null;\n\n        loginWithRedirect().then(()=> {\n            try {\n                  getAccessTokenSilently({\n                  audience: 'https://api.kovidr.ie/guess',\n                  scope: \"read:guesses read:caseNumbers write:guesses\",\n                }).then((response) =>{\n                    const expirationDate = new Date(new Date().getTime() + 72 * 1000);\n                    localStorage.setItem('token', response.token);\n                    localStorage.setItem('expirationDate', expirationDate);\n                    localStorage.setItem('userId', user.name);\n                    dispatch(authSuccess(token, user.name));\n                });\n              } catch (e) {\n                dispatch(authFail(e.message));\n              }\n        });\n    };\n};\n\nexport const setAuthRedirectPath = (path) => {\n    return {\n        type: actionTypes.SET_AUTH_REDIRECT_PATH,\n        path: path\n    };\n};\n\nexport const authCheckState = () => {\n    return dispatch => {\n        const token = localStorage.getItem('token');\n        if(!token) {\n            dispatch(logout());\n        } else {\n            const expirationDate = new Date(localStorage.getItem('expirationDate'));\n            if (expirationDate < new Date()) {\n                dispatch(logout());\n            } else {\n                const userId = localStorage.getItem('userId');\n                dispatch(authSuccess(token, userId));\n                dispatch(checkAuthTimeout((expirationDate.getTime() - new Date().getTime()) / 1000 ));\n            }\n        }\n    };\n};"]},"metadata":{},"sourceType":"module"}