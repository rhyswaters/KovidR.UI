{"ast":null,"code":"import * as actionTypes from './actionTypes';\nexport const authStart = () => {\n  return {\n    type: actionTypes.AUTH_START\n  };\n};\nexport const authSuccess = token => {\n  return {\n    type: actionTypes.AUTH_SUCCESS,\n    token: token\n  };\n};\nexport const authFail = error => {\n  return {\n    type: actionTypes.AUTH_FAIL,\n    error: error\n  };\n};\nexport const checkAuthTimeout = expirationTime => {\n  return dispatch => {\n    setTimeout(() => {\n      dispatch(logout());\n    }, expirationTime * 1000);\n  };\n};\nexport const logout = () => {\n  localStorage.removeItem('token');\n  localStorage.removeItem('expirationDate');\n  return {\n    type: actionTypes.AUTH_LOGOUT\n  };\n};\nexport const auth = token => {\n  return dispatch => {\n    dispatch(authStart());\n    const expirationDate = new Date(new Date().getTime() + 120 * 60000);\n    localStorage.setItem('token', token);\n    localStorage.setItem('expirationDate', expirationDate);\n    dispatch(authSuccess(token));\n  };\n};\nexport const setAuthRedirectPath = path => {\n  return {\n    type: actionTypes.SET_AUTH_REDIRECT_PATH,\n    path: path\n  };\n};\nexport const authCheckState = () => {\n  return dispatch => {\n    const token = localStorage.getItem('token');\n\n    if (!token) {\n      dispatch(logout());\n    } else {\n      const expirationDate = new Date(localStorage.getItem('expirationDate'));\n\n      if (expirationDate < new Date()) {\n        dispatch(logout());\n      } else {\n        dispatch(authSuccess(token));\n        dispatch(checkAuthTimeout((expirationDate.getTime() - new Date().getTime()) / 1000));\n      }\n    }\n  };\n};","map":{"version":3,"sources":["/Users/rhyswaters/repos/KovidR.UI/src/store/actions/auth.js"],"names":["actionTypes","authStart","type","AUTH_START","authSuccess","token","AUTH_SUCCESS","authFail","error","AUTH_FAIL","checkAuthTimeout","expirationTime","dispatch","setTimeout","logout","localStorage","removeItem","AUTH_LOGOUT","auth","expirationDate","Date","getTime","setItem","setAuthRedirectPath","path","SET_AUTH_REDIRECT_PATH","authCheckState","getItem"],"mappings":"AAAA,OAAO,KAAKA,WAAZ,MAA6B,eAA7B;AAEA,OAAO,MAAMC,SAAS,GAAG,MAAM;AAC3B,SAAO;AACHC,IAAAA,IAAI,EAAEF,WAAW,CAACG;AADf,GAAP;AAGH,CAJM;AAMP,OAAO,MAAMC,WAAW,GAAIC,KAAD,IAAW;AAClC,SAAO;AACHH,IAAAA,IAAI,EAAEF,WAAW,CAACM,YADf;AAEHD,IAAAA,KAAK,EAAEA;AAFJ,GAAP;AAIH,CALM;AAOP,OAAO,MAAME,QAAQ,GAAIC,KAAD,IAAW;AAC/B,SAAO;AACHN,IAAAA,IAAI,EAAEF,WAAW,CAACS,SADf;AAEHD,IAAAA,KAAK,EAAEA;AAFJ,GAAP;AAIH,CALM;AAOP,OAAO,MAAME,gBAAgB,GAAIC,cAAD,IAAoB;AAChD,SAAOC,QAAQ,IAAI;AACfC,IAAAA,UAAU,CAAC,MAAM;AACbD,MAAAA,QAAQ,CAACE,MAAM,EAAP,CAAR;AACH,KAFS,EAEPH,cAAc,GAAG,IAFV,CAAV;AAGH,GAJD;AAKH,CANM;AAQP,OAAO,MAAMG,MAAM,GAAG,MAAM;AACxBC,EAAAA,YAAY,CAACC,UAAb,CAAwB,OAAxB;AACAD,EAAAA,YAAY,CAACC,UAAb,CAAwB,gBAAxB;AAEA,SAAO;AACHd,IAAAA,IAAI,EAAEF,WAAW,CAACiB;AADf,GAAP;AAGH,CAPM;AASP,OAAO,MAAMC,IAAI,GAAIb,KAAD,IAAW;AAC3B,SAAOO,QAAQ,IAAI;AAEfA,IAAAA,QAAQ,CAACX,SAAS,EAAV,CAAR;AACA,UAAMkB,cAAc,GAAG,IAAIC,IAAJ,CAAS,IAAIA,IAAJ,GAAWC,OAAX,KAAuB,MAAM,KAAtC,CAAvB;AACAN,IAAAA,YAAY,CAACO,OAAb,CAAqB,OAArB,EAA8BjB,KAA9B;AACAU,IAAAA,YAAY,CAACO,OAAb,CAAqB,gBAArB,EAAuCH,cAAvC;AACAP,IAAAA,QAAQ,CAACR,WAAW,CAACC,KAAD,CAAZ,CAAR;AACH,GAPD;AAQH,CATM;AAYP,OAAO,MAAMkB,mBAAmB,GAAIC,IAAD,IAAU;AACzC,SAAO;AACHtB,IAAAA,IAAI,EAAEF,WAAW,CAACyB,sBADf;AAEHD,IAAAA,IAAI,EAAEA;AAFH,GAAP;AAIH,CALM;AAOP,OAAO,MAAME,cAAc,GAAG,MAAM;AAChC,SAAOd,QAAQ,IAAI;AACf,UAAMP,KAAK,GAAGU,YAAY,CAACY,OAAb,CAAqB,OAArB,CAAd;;AACA,QAAG,CAACtB,KAAJ,EAAW;AACPO,MAAAA,QAAQ,CAACE,MAAM,EAAP,CAAR;AACH,KAFD,MAEO;AACH,YAAMK,cAAc,GAAG,IAAIC,IAAJ,CAASL,YAAY,CAACY,OAAb,CAAqB,gBAArB,CAAT,CAAvB;;AACA,UAAIR,cAAc,GAAG,IAAIC,IAAJ,EAArB,EAAiC;AAC7BR,QAAAA,QAAQ,CAACE,MAAM,EAAP,CAAR;AACH,OAFD,MAEO;AACHF,QAAAA,QAAQ,CAACR,WAAW,CAACC,KAAD,CAAZ,CAAR;AACAO,QAAAA,QAAQ,CAACF,gBAAgB,CAAC,CAACS,cAAc,CAACE,OAAf,KAA2B,IAAID,IAAJ,GAAWC,OAAX,EAA5B,IAAoD,IAArD,CAAjB,CAAR;AACH;AACJ;AACJ,GAbD;AAcH,CAfM","sourcesContent":["import * as actionTypes from './actionTypes';\n\nexport const authStart = () => {\n    return {\n        type: actionTypes.AUTH_START\n    };\n};\n\nexport const authSuccess = (token) => {\n    return {\n        type: actionTypes.AUTH_SUCCESS,\n        token: token\n    };\n};\n\nexport const authFail = (error) => {\n    return {\n        type: actionTypes.AUTH_FAIL,\n        error: error\n    };\n};\n\nexport const checkAuthTimeout = (expirationTime) => {\n    return dispatch => {\n        setTimeout(() => {\n            dispatch(logout());\n        }, expirationTime * 1000);\n    };\n}\n\nexport const logout = () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('expirationDate');\n\n    return {\n        type: actionTypes.AUTH_LOGOUT\n    }\n}\n\nexport const auth = (token) => {\n    return dispatch => {\n\n        dispatch(authStart());\n        const expirationDate = new Date(new Date().getTime() + 120 * 60000);\n        localStorage.setItem('token', token);\n        localStorage.setItem('expirationDate', expirationDate);\n        dispatch(authSuccess(token));\n    }\n};\n\n\nexport const setAuthRedirectPath = (path) => {\n    return {\n        type: actionTypes.SET_AUTH_REDIRECT_PATH,\n        path: path\n    };\n};\n\nexport const authCheckState = () => {\n    return dispatch => {\n        const token = localStorage.getItem('token');\n        if(!token) {\n            dispatch(logout());\n        } else {\n            const expirationDate = new Date(localStorage.getItem('expirationDate'));\n            if (expirationDate < new Date()) {\n                dispatch(logout());\n            } else {\n                dispatch(authSuccess(token));\n                dispatch(checkAuthTimeout((expirationDate.getTime() - new Date().getTime()) / 1000 ));\n            }\n        }\n    };\n};"]},"metadata":{},"sourceType":"module"}